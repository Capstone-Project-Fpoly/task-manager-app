type Board {
  color: String
  createdAt: String!
  id: String!
  isPublic: Boolean!
  lists: [List!]
  ownerUser: User!
  title: String
  users: [User!]
}

type Card {
  checkLists: [CheckList!]
  comments: [Comment!]
  createdAt: String!
  createdBy: User!
  description: String
  endDate: String
  id: String!
  list: List!
  reminder: Reminder
  startedDate: String!
  title: String
  users: [User!]
}

type CheckList {
  card: Card!
  content: String!
  id: String!
  isChecked: Boolean!
}

type Comment {
  card: Card!
  comment: String!
  createdAt: String!
  id: String!
  user: User!
}

input InputEmail {
  email: String!
  passWord: String!
}

input InputVerifyEmail {
  email: String!
  otp: String!
}

type List {
  board: Board!
  cards: [Card!]
  createdAt: String!
  createdBy: User!
  id: String!
  label: String!
}

type Mutation {
  createBoard(color: String, isPublic: Boolean!, title: String!): Board
  getBoards: [Board]
  leaveBoard(idBoard: String!): Boolean
  loginByEmail(idToken: String!): String
  loginByGoogle(idToken: String!): String
  registerByEmail(input: InputEmail!): String
  sendOTPEmail(email: String!): Boolean
  testCallSubscription: String
  verifyEmail(input: InputVerifyEmail!): Boolean
}

type Query {
  getToken(email: String!): String
  me: User
}

enum Reminder {
  FifteenMinutesBefore
  FiveMinutesBefore
  NoReminder
  OnDueDate
  OneDayBefore
  OneHourBefore
  TenMinutesBefore
  TwoDaysBefore
  TwoHoursBefore
}

type Subscription {
  test: String
}

type User {
  avatar: String
  createdAt: String
  email: String
  fullName: String
  uid: String!
  updatedAt: String
}