type Board {
  color: String
  createdAt: String!
  id: String!
  isPublic: Boolean!
  ownerUser: User!
  title: String
}

type Card {
  checkLists: [CheckList!]
  comments: [Comment!]
  createdAt: String!
  createdBy: User!
  description: String
  endDate: String
  id: String!
  reminder: Reminder
  startedDate: String!
  title: String
  users: [User!]
}

type CheckList {
  content: String!
  id: String!
  isChecked: Boolean!
}

type Comment {
  comment: String!
  createdAt: String!
  id: String!
  user: User!
}

input InputEmail {
  email: String!
  passWord: String!
}

input InputLogin {
  deviceId: String!
  idToken: String!
}

input InputVerifyEmail {
  email: String!
  otp: String!
}

type List {
  cards: [Card!]
  createdAt: String!
  createdBy: User!
  id: String!
  label: String!
}

type Mutation {
  createBoard(color: String, isPublic: Boolean!, title: String!): Board
  createList(idBoard: String!, label: String!): List
  deleteList(idList: String!): Boolean
  getBoards: [Board]
  getLists(idBoard: String!): [List]
  leaveBoard(idBoard: String!): Boolean
  loginByEmail(input: InputLogin!): String
  loginByGoogle(input: InputLogin!): String
  logout: Boolean
  registerByEmail(input: InputEmail!): String
  sendOTPEmail(email: String!): Boolean
  testCallSubscription: String
  updateList(idList: String!, label: String!): List
  verifyEmail(input: InputVerifyEmail!): Boolean
}

type Notification {
  content: String!
  createdAt: String!
  creater: User!
  id: String!
  is_seen: Boolean!
  title: String!
  topic: TopicNotification!
}

type Query {
  getToken(email: String!): String
  me: User
}

enum Reminder {
  FifteenMinutesBefore
  FiveMinutesBefore
  NoReminder
  OnDueDate
  OneDayBefore
  OneHourBefore
  TenMinutesBefore
  TwoDaysBefore
  TwoHoursBefore
}

type Subscription {
  test(id: String!): String
}

enum TopicNotification {
  Board
  Card
  CheckList
  Comment
  List
}

type User {
  avatar: String
  createdAt: String
  email: String
  fullName: String
  uid: String!
  updatedAt: String
}